{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar stripAccents = function (str) {\n  var accents = 'ÀÁÂÃÄÅĄàáâãäåąÒÓÔÕÕÖØòóôõöøÈÉÊËĘèéêëðęÇĆçćÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠŚšśŸÿýŽŹŻžźżŁłŃń';\n  var fixes = 'AAAAAAAaaaaaaaOOOOOOOooooooEEEEEeeeeeeCCccDIIIIiiiiUUUUuuuuNnSSssYyyZZZzzzLlNn';\n  var split = accents.split('').join('|');\n  var reg = new RegExp(\"(\" + split + \")\", 'g');\n\n  function replacement(a) {\n    return fixes[accents.indexOf(a)] || '';\n  }\n\n  return str.replace(reg, replacement);\n};\n\nvar harmonize = function (text, delimiter, ignoreInvalid) {\n  if (ignoreInvalid === void 0) {\n    ignoreInvalid = false;\n  }\n\n  var harmonized = stripAccents(text).trim().toLowerCase();\n\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n\n  return harmonized.replace(new RegExp(\"[^a-z0-9\" + delimiter + \"]+\", 'g'), delimiter);\n};\n\nvar slugify = function (node, options) {\n  if (options === void 0) {\n    options = {\n      delimiter: '-',\n      prefix: ''\n    };\n  }\n\n  if (!options.delimiter) options.delimiter = '-';\n  if (!options.prefix) options.prefix = '';\n\n  if (!node || typeof node === 'boolean') {\n    return '';\n  }\n\n  var delimiter = options.delimiter,\n      prefix = options.prefix; // string, number\n\n  if (typeof node === 'string' || typeof node === 'number') {\n    var harmonizedPrefix = harmonize(prefix, delimiter, true);\n    var harmonizedNode = harmonize(String(node), delimiter);\n\n    if (harmonizedPrefix) {\n      return \"\" + harmonizedPrefix + delimiter + harmonizedNode;\n    }\n\n    return harmonizedNode;\n  } // empty object\n\n\n  if (typeof node === 'object' && Object.keys(node).length === 0) {\n    return '';\n  } // We did the check about empty object before\n  // const castedNode = node as React.ReactElement<any> | React.ReactNodeArray | React.ReactPortal;\n  // ReactPortal\n\n\n  if ('children' in node) {\n    return slugify(node.children);\n  } // ReactNodeArray\n\n\n  if (node instanceof Array) {\n    return slugify(node.map(function (n) {\n      return slugify(n, {\n        delimiter: delimiter\n      });\n    }).join(delimiter), options);\n  } // ReactElement\n\n\n  if ('type' in node) return slugify(node.props.children, options); // unhandled case\n\n  return '';\n};\n\nexports[\"default\"] = slugify;","map":{"version":3,"sources":["../src/slugify.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar stripAccents = function (str) {\n    var accents = 'ÀÁÂÃÄÅĄàáâãäåąÒÓÔÕÕÖØòóôõöøÈÉÊËĘèéêëðęÇĆçćÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠŚšśŸÿýŽŹŻžźżŁłŃń';\n    var fixes = 'AAAAAAAaaaaaaaOOOOOOOooooooEEEEEeeeeeeCCccDIIIIiiiiUUUUuuuuNnSSssYyyZZZzzzLlNn';\n    var split = accents.split('').join('|');\n    var reg = new RegExp(\"(\" + split + \")\", 'g');\n    function replacement(a) {\n        return fixes[accents.indexOf(a)] || '';\n    }\n    return str.replace(reg, replacement);\n};\nvar harmonize = function (text, delimiter, ignoreInvalid) {\n    if (ignoreInvalid === void 0) { ignoreInvalid = false; }\n    var harmonized = stripAccents(text).trim().toLowerCase();\n    if (ignoreInvalid) {\n        return harmonized.replace(/\\s+/g, delimiter);\n    }\n    return harmonized.replace(new RegExp(\"[^a-z0-9\" + delimiter + \"]+\", 'g'), delimiter);\n};\nvar slugify = function (node, options) {\n    if (options === void 0) { options = { delimiter: '-', prefix: '' }; }\n    if (!options.delimiter)\n        options.delimiter = '-';\n    if (!options.prefix)\n        options.prefix = '';\n    if (!node || typeof node === 'boolean') {\n        return '';\n    }\n    var delimiter = options.delimiter, prefix = options.prefix;\n    // string, number\n    if (typeof node === 'string' || typeof node === 'number') {\n        var harmonizedPrefix = harmonize(prefix, delimiter, true);\n        var harmonizedNode = harmonize(String(node), delimiter);\n        if (harmonizedPrefix) {\n            return \"\" + harmonizedPrefix + delimiter + harmonizedNode;\n        }\n        return harmonizedNode;\n    }\n    // empty object\n    if (typeof node === 'object' && Object.keys(node).length === 0) {\n        return '';\n    }\n    // We did the check about empty object before\n    // const castedNode = node as React.ReactElement<any> | React.ReactNodeArray | React.ReactPortal;\n    // ReactPortal\n    if ('children' in node) {\n        return slugify(node.children);\n    }\n    // ReactNodeArray\n    if (node instanceof Array) {\n        return slugify(node.map(function (n) { return slugify(n, { delimiter: delimiter }); }).join(delimiter), options);\n    }\n    // ReactElement\n    if ('type' in node)\n        return slugify(node.props.children, options);\n    // unhandled case\n    return '';\n};\nexports[\"default\"] = slugify;\n//# sourceMappingURL=slugify.js.map"]},"metadata":{},"sourceType":"script"}