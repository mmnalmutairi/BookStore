{"ast":null,"code":"import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport slugify from 'react-slugify';\nimport axios from 'axios'; // The file name starts with lowercase \n\nclass BookStore {\n  // proprty in lowercase\n  constructor() {\n    this.Books = [];\n    this.isLoading = false;\n\n    this.deletebook = async bookName => {\n      try {\n        await axios.delete(`http://localhost:8000/Books/${bookName}`);\n        const updateBooks = this.Books.filter(book => book.name !== bookName);\n        this.Books = updateBooks;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateBook = updatedBook => {\n      const book = this.Books.find(book => book.name === updatedBook.name);\n\n      for (const key in book) book[key] = updatedBook[key];\n\n      book.slug = slugify(book.name);\n    };\n\n    this.getBooks = () => {\n      this.Books = Books;\n    };\n\n    this.createbook = newBook => {\n      newBook.length = this.Books.length + 1;\n      newBook.slug = slugify(newBook.name);\n      this.Books.push(newBook);\n    };\n\n    this.fetchBooks = async () => {\n      try {\n        const response = axios.get(\"http://localhost:8000/Books\");\n        this.Books = (await response).data;\n      } catch (error) {\n        console.error(\"fetchMovies:\", error);\n      }\n    };\n\n    makeAutoObservable(this);\n  } // use the id here instead of name\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nbookStore.getBooks();\nexport default bookStore;","map":{"version":3,"sources":["/Users/engineermaha/Developement/JSFoundations-Git/BookStore/bookstore/src/components/stores/BookStore.js"],"names":["Books","makeAutoObservable","slugify","axios","BookStore","constructor","isLoading","deletebook","bookName","delete","updateBooks","filter","book","name","error","console","log","updateBook","updatedBook","find","key","slug","getBooks","createbook","newBook","length","push","fetchBooks","response","get","data","bookStore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,kBAAT,QAAmC,MAAnC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,MAAMC,SAAN,CAAgB;AAEZ;AAKAC,EAAAA,WAAW,GAAG;AAAA,SAHdL,KAGc,GAHN,EAGM;AAAA,SAFdM,SAEc,GAFF,KAEE;;AAAA,SAKdC,UALc,GAKD,MAAOC,QAAP,IAAoB;AAC7B,UAAI;AACA,cAAML,KAAK,CAACM,MAAN,CAAc,+BAA8BD,QAAS,EAArD,CAAN;AACA,cAAME,WAAW,GAAG,KAAKV,KAAL,CAAWW,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcL,QAA1C,CAApB;AACA,aAAKR,KAAL,GAAaU,WAAb;AACH,OAJD,CAIE,OAAOI,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KAba;;AAAA,SAedG,UAfc,GAeAC,WAAD,IAAiB;AAC1B,YAAMN,IAAI,GAAG,KAAKZ,KAAL,CAAWmB,IAAX,CAAiBP,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcK,WAAW,CAACL,IAApD,CAAb;;AACA,WAAK,MAAMO,GAAX,IAAkBR,IAAlB,EAAwBA,IAAI,CAACQ,GAAD,CAAJ,GAAYF,WAAW,CAACE,GAAD,CAAvB;;AACxBR,MAAAA,IAAI,CAACS,IAAL,GAAYnB,OAAO,CAACU,IAAI,CAACC,IAAN,CAAnB;AACH,KAnBa;;AAAA,SAsBdS,QAtBc,GAsBH,MAAM;AAEb,WAAKtB,KAAL,GAAaA,KAAb;AACH,KAzBa;;AAAA,SA2BduB,UA3Bc,GA2BAC,OAAD,IAAa;AACtBA,MAAAA,OAAO,CAACC,MAAR,GAAiB,KAAKzB,KAAL,CAAWyB,MAAX,GAAoB,CAArC;AACAD,MAAAA,OAAO,CAACH,IAAR,GAAenB,OAAO,CAACsB,OAAO,CAACX,IAAT,CAAtB;AACA,WAAKb,KAAL,CAAW0B,IAAX,CAAgBF,OAAhB;AACH,KA/Ba;;AAAA,SAiCdG,UAjCc,GAiCD,YAAY;AACrB,UAAI;AACA,cAAMC,QAAQ,GAAGzB,KAAK,CAAC0B,GAAN,CAAU,6BAAV,CAAjB;AACA,aAAK7B,KAAL,GAAa,CAAC,MAAM4B,QAAP,EAAiBE,IAA9B;AACH,OAHD,CAGE,OAAOhB,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B;AACH;AAEJ,KAzCa;;AACVb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GATW,CAWZ;;;AAXY;;AAoDhB,MAAM8B,SAAS,GAAG,IAAI3B,SAAJ,EAAlB;AACA2B,SAAS,CAACJ,UAAV;AAEAI,SAAS,CAACT,QAAV;AAEA,eAAeS,SAAf","sourcesContent":["import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport slugify from 'react-slugify';\nimport axios from 'axios';\n\n\n// The file name starts with lowercase \nclass BookStore {\n\n    // proprty in lowercase\n\n    Books = [];\n    isLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // use the id here instead of name\n    deletebook = async (bookName) => {\n        try {\n            await axios.delete(`http://localhost:8000/Books/${bookName}`);\n            const updateBooks = this.Books.filter((book) => book.name !== bookName);\n            this.Books = updateBooks;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    updateBook = (updatedBook) => {\n        const book = this.Books.find((book) => book.name === updatedBook.name);\n        for (const key in book) book[key] = updatedBook[key];\n        book.slug = slugify(book.name);\n    };\n\n\n    getBooks = () => {\n\n        this.Books = Books;\n    };\n\n    createbook = (newBook) => {\n        newBook.length = this.Books.length + 1;\n        newBook.slug = slugify(newBook.name);\n        this.Books.push(newBook);\n    };\n\n    fetchBooks = async () => {\n        try {\n            const response = axios.get(\"http://localhost:8000/Books\");\n            this.Books = (await response).data;\n        } catch (error) {\n            console.error(\"fetchMovies:\", error)\n        }\n\n    }\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\n\nbookStore.getBooks();\n\nexport default bookStore;"]},"metadata":{},"sourceType":"module"}