{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport instance from \"./instance\";\nimport decode from \"jwt-decode\"; // The file name starts with lowercase \n\nclass UserStore {\n  constructor() {\n    this.user = null;\n\n    this.signup = async newUser => {\n      try {\n        const res = await instance.post(\"/signup\", newUser);\n        this.setUser(res.data.token);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.signin = async userData => {\n      try {\n        const res = await instance.post(\"/signin\", userData);\n        this.setUser(res.data.token);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.setUser = token => {\n      localStorage.setItem(\"myToken\", token);\n      instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n      this.user = decode(token);\n    };\n\n    this.signout = () => {\n      delete instance.defaults.headers.common.Authorization;\n      localStorage.removeItem(\"myToken\");\n      this.user = null;\n    };\n\n    this.checkForToken = () => {\n      const token = localStorage.getItem(\"myToken\");\n\n      if (token) {\n        const currentTime = Date.now();\n        const user = decode(token);\n\n        if (user.exp >= currentTime) {\n          this.setUser(token);\n        } else {\n          this.signout();\n        }\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n}\n\nconst userStore = new UserStore();\nuserStore.checkForToken();\nexport default userStore;","map":{"version":3,"sources":["/Users/engineermaha/Developement/JSFoundations-Git/BookStore/bookstore/src/components/stores/authStore.js"],"names":["makeAutoObservable","instance","decode","UserStore","constructor","user","signup","newUser","res","post","setUser","data","token","error","console","signin","userData","localStorage","setItem","defaults","headers","common","Authorization","signout","removeItem","checkForToken","getItem","currentTime","Date","now","exp","userStore"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,SAAN,CAAgB;AAIZC,EAAAA,WAAW,GAAG;AAAA,SAFdC,IAEc,GAFP,IAEO;;AAAA,SAIdC,MAJc,GAIL,MAAOC,OAAP,IAAmB;AACxB,UAAI;AACA,cAAMC,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAT,CAAc,SAAd,EAAyBF,OAAzB,CAAlB;AACA,aAAKG,OAAL,CAAaF,GAAG,CAACG,IAAJ,CAASC,KAAtB;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AAEJ,KAZa;;AAAA,SAcdE,MAdc,GAcL,MAAOC,QAAP,IAAoB;AACzB,UAAI;AACA,cAAMR,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAT,CAAc,SAAd,EAAyBO,QAAzB,CAAlB;AACA,aAAKN,OAAL,CAAaF,GAAG,CAACG,IAAJ,CAASC,KAAtB;AACH,OAHD,CAGE,OAAOC,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AAEJ,KAtBa;;AAAA,SAwBdH,OAxBc,GAwBHE,KAAD,IAAW;AACjBK,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCN,KAAhC;AACAX,MAAAA,QAAQ,CAACkB,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiCC,aAAjC,GAAkD,UAASV,KAAM,EAAjE;AACA,WAAKP,IAAL,GAAYH,MAAM,CAACU,KAAD,CAAlB;AACH,KA5Ba;;AAAA,SA8BdW,OA9Bc,GA8BJ,MAAM;AACZ,aAAOtB,QAAQ,CAACkB,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiCC,aAAxC;AACAL,MAAAA,YAAY,CAACO,UAAb,CAAwB,SAAxB;AACA,WAAKnB,IAAL,GAAY,IAAZ;AACH,KAlCa;;AAAA,SAoCdoB,aApCc,GAoCE,MAAM;AAClB,YAAMb,KAAK,GAAGK,YAAY,CAACS,OAAb,CAAqB,SAArB,CAAd;;AACA,UAAId,KAAJ,EAAW;AACP,cAAMe,WAAW,GAAGC,IAAI,CAACC,GAAL,EAApB;AACA,cAAMxB,IAAI,GAAGH,MAAM,CAACU,KAAD,CAAnB;;AACA,YAAIP,IAAI,CAACyB,GAAL,IAAYH,WAAhB,EAA6B;AACzB,eAAKjB,OAAL,CAAaE,KAAb;AACH,SAFD,MAEO;AACH,eAAKW,OAAL;AACH;AACJ;AACJ,KA/Ca;;AACVvB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AANW;;AAuDhB,MAAM+B,SAAS,GAAG,IAAI5B,SAAJ,EAAlB;AACA4B,SAAS,CAACN,aAAV;AACA,eAAeM,SAAf","sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport instance from \"./instance\";\nimport decode from \"jwt-decode\";\n\n// The file name starts with lowercase \nclass UserStore {\n\n    user = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    signup = async (newUser) => {\n        try {\n            const res = await instance.post(\"/signup\", newUser);\n            this.setUser(res.data.token);\n        } catch (error) {\n            console.error(error);\n        }\n\n    };\n\n    signin = async (userData) => {\n        try {\n            const res = await instance.post(\"/signin\", userData);\n            this.setUser(res.data.token);\n        } catch (error) {\n            console.error(error);\n        }\n\n    };\n\n    setUser = (token) => {\n        localStorage.setItem(\"myToken\", token);\n        instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n        this.user = decode(token);\n    };\n\n    signout = () => {\n        delete instance.defaults.headers.common.Authorization;\n        localStorage.removeItem(\"myToken\");\n        this.user = null;\n    };\n\n    checkForToken = () => {\n        const token = localStorage.getItem(\"myToken\");\n        if (token) {\n            const currentTime = Date.now();\n            const user = decode(token);\n            if (user.exp >= currentTime) {\n                this.setUser(token)\n            } else {\n                this.signout();\n            }\n        }\n    }\n\n}\n\nconst userStore = new UserStore();\nuserStore.checkForToken();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}