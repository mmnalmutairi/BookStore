{"ast":null,"code":"import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport slugify from 'react-slugify';\nimport axios from 'axios'; // The file name starts with lowercase \n\nclass BookStore {\n  // proprty in lowercase\n  constructor() {\n    this.Books = [];\n    this.isLoading = false;\n\n    this.deletebook = async bookId => {\n      try {\n        await axios.delete(`http://localhost:8000/books/${bookId}`);\n        const updateBooks = this.Books.filter(book => book.id !== bookId);\n        this.Books = updateBooks;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateBook = async updatedBook => {\n      try {\n        const response = await axios.put(`http://localhost:8000/books/${updatedBook.id}`);\n        const book = this.Books.find(book => book.id === updatedBook.id);\n        book.name = updatedBook.name;\n        book.image = updatedBook.image;\n        book.brief = updatedBook.brief;\n        console.log(response);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getBooks = () => {\n      this.Books = Books;\n    };\n\n    this.createbook = async newBook => {\n      try {\n        const response = await axios.post(\"http://localhost:8000/books\", newBook);\n        this.Books.push(response.data);\n        console.log(response);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.fetchBooks = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/books\");\n        this.Books = response.data;\n        console.log(response.data);\n      } catch (error) {\n        console.error(\"fetchMovies:\", error);\n      }\n    };\n\n    makeAutoObservable(this);\n  } // use the id here instead of name\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nbookStore.getBooks();\nexport default bookStore;","map":{"version":3,"sources":["/Users/engineermaha/Developement/JSFoundations-Git/BookStore/bookstore/src/components/stores/BookStore.js"],"names":["Books","makeAutoObservable","slugify","axios","BookStore","constructor","isLoading","deletebook","bookId","delete","updateBooks","filter","book","id","error","console","log","updateBook","updatedBook","response","put","find","name","image","brief","getBooks","createbook","newBook","post","push","data","fetchBooks","get","bookStore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,kBAAT,QAAmC,MAAnC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,MAAMC,SAAN,CAAgB;AAEZ;AAKAC,EAAAA,WAAW,GAAG;AAAA,SAHdL,KAGc,GAHN,EAGM;AAAA,SAFdM,SAEc,GAFF,KAEE;;AAAA,SAKdC,UALc,GAKD,MAAOC,MAAP,IAAkB;AAC3B,UAAI;AACA,cAAML,KAAK,CAACM,MAAN,CAAc,+BAA8BD,MAAO,EAAnD,CAAN;AACA,cAAME,WAAW,GAAG,KAAKV,KAAL,CAAWW,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAxC,CAApB;AACA,aAAKR,KAAL,GAAaU,WAAb;AACH,OAJD,CAIE,OAAOI,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,KAba;;AAAA,SAedG,UAfc,GAeD,MAAOC,WAAP,IAAuB;AAChC,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAW,+BAA8BF,WAAW,CAACL,EAAG,EAAxD,CAAvB;AAEA,cAAMD,IAAI,GAAG,KAAKZ,KAAL,CAAWqB,IAAX,CAAiBT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYK,WAAW,CAACL,EAAlD,CAAb;AACAD,QAAAA,IAAI,CAACU,IAAL,GAAYJ,WAAW,CAACI,IAAxB;AACAV,QAAAA,IAAI,CAACW,KAAL,GAAaL,WAAW,CAACK,KAAzB;AACAX,QAAAA,IAAI,CAACY,KAAL,GAAaN,WAAW,CAACM,KAAzB;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AAEH,OATD,CASE,OAAOL,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ,KA7Ba;;AAAA,SA+BdW,QA/Bc,GA+BH,MAAM;AAEb,WAAKzB,KAAL,GAAaA,KAAb;AACH,KAlCa;;AAAA,SAoCd0B,UApCc,GAoCD,MAAOC,OAAP,IAAmB;AAE5B,UAAI;AACA,cAAMR,QAAQ,GAAG,MAAMhB,KAAK,CAACyB,IAAN,CAAW,6BAAX,EAA0CD,OAA1C,CAAvB;AACA,aAAK3B,KAAL,CAAW6B,IAAX,CAAgBV,QAAQ,CAACW,IAAzB;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACH,OAJD,CAIE,OAAOL,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AAEJ,KA9Ca;;AAAA,SAgDdiB,UAhDc,GAgDD,YAAY;AACrB,UAAI;AACA,cAAMZ,QAAQ,GAAG,MAAMhB,KAAK,CAAC6B,GAAN,CAAU,6BAAV,CAAvB;AACA,aAAKhC,KAAL,GAAcmB,QAAD,CAAWW,IAAxB;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACW,IAArB;AACH,OAJD,CAIE,OAAOhB,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B;AACH;AAEJ,KAzDa;;AACVb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GATW,CAWZ;;;AAXY;;AAsEhB,MAAMgC,SAAS,GAAG,IAAI7B,SAAJ,EAAlB;AACA6B,SAAS,CAACF,UAAV;AACAE,SAAS,CAACR,QAAV;AAEA,eAAeQ,SAAf","sourcesContent":["import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport slugify from 'react-slugify';\nimport axios from 'axios';\n\n\n// The file name starts with lowercase \nclass BookStore {\n\n    // proprty in lowercase\n\n    Books = [];\n    isLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // use the id here instead of name\n    deletebook = async (bookId) => {\n        try {\n            await axios.delete(`http://localhost:8000/books/${bookId}`);\n            const updateBooks = this.Books.filter((book) => book.id !== bookId);\n            this.Books = updateBooks;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    updateBook = async (updatedBook) => {\n        try {\n            const response = await axios.put(`http://localhost:8000/books/${updatedBook.id}`);\n\n            const book = this.Books.find((book) => book.id === updatedBook.id);\n            book.name = updatedBook.name;\n            book.image = updatedBook.image;\n            book.brief = updatedBook.brief;\n            console.log(response);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    };\n\n    getBooks = () => {\n\n        this.Books = Books;\n    };\n\n    createbook = async (newBook) => {\n\n        try {\n            const response = await axios.post(\"http://localhost:8000/books\", newBook);\n            this.Books.push(response.data);\n            console.log(response);\n        } catch (error) {\n            console.error(error);\n        }\n\n    };\n\n    fetchBooks = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:8000/books\");\n            this.Books = (response).data;\n            console.log(response.data);\n        } catch (error) {\n            console.error(\"fetchMovies:\", error)\n        }\n\n    }\n\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nbookStore.getBooks();\n\nexport default bookStore;"]},"metadata":{},"sourceType":"module"}