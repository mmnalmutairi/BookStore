{"ast":null,"code":"import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport axios from 'axios'; // The file name starts with lowercase \n\nclass BookStore {\n  // proprty in lowercase\n  constructor() {\n    this.Books = [];\n    this.isLoading = false;\n\n    this.deletebook = async bookId => {\n      try {\n        await axios.delete(`http://localhost:8000/books/${bookId}`);\n        const updateBooks = this.Books.filter(book => book.id !== bookId);\n        this.Books = updateBooks;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateBook = async updatedBook => {\n      try {\n        const formData = new FormData();\n\n        for (const key in updatedBook) formData.append(key, updatedBook[key]); // console.log(\"formData\", formData);\n\n\n        const response = await axios.put(`http://localhost:8000/books/${updatedBook.id}`, formData);\n        const book = this.Books.find(book => book.id === response.data.id);\n\n        for (const key in book) book[key] = response.data[key];\n\n        book.name = updatedBook.name;\n        book.image = updatedBook.image;\n        book.brief = updatedBook.brief;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getBooks = () => {\n      this.Books = Books;\n    };\n\n    this.createbook = async newBook => {\n      try {\n        const formData = new FormData();\n\n        for (const key in newBook) formData.append(key, newBook[key]); // console.log(\"formData\", formData);\n\n\n        const response = await axios.post(\"http://localhost:8000/books\", formData);\n        this.Books.push(response.data);\n        console.log(response);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.fetchBooks = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/books\");\n        this.Books = response.data;\n        console.log(response.data);\n      } catch (error) {\n        console.error(\"fetchMovies:\", error);\n      }\n    };\n\n    makeAutoObservable(this);\n  } // use the id here instead of name\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nbookStore.getBooks();\nexport default bookStore;","map":{"version":3,"sources":["/Users/engineermaha/Developement/JSFoundations-Git/BookStore/bookstore/src/components/stores/BookStore.js"],"names":["Books","makeAutoObservable","axios","BookStore","constructor","isLoading","deletebook","bookId","delete","updateBooks","filter","book","id","error","console","log","updateBook","updatedBook","formData","FormData","key","append","response","put","find","data","name","image","brief","getBooks","createbook","newBook","post","push","fetchBooks","get","bookStore"],"mappings":"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","sourcesContent":["import Books from \"../../Books\";\nimport { makeAutoObservable } from 'mobx';\nimport axios from 'axios';\n\n\n\n// The file name starts with lowercase \nclass BookStore {\n\n    // proprty in lowercase\n\n    Books = [];\n    isLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // use the id here instead of name\n    deletebook = async (bookId) => {\n        try {\n            await axios.delete(`http://localhost:8000/books/${bookId}`);\n            const updateBooks = this.Books.filter((book) => book.id !== bookId);\n            this.Books = updateBooks;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    updateBook = async (updatedBook) => {\n        try {\n            const formData = new FormData();\n            for (const key in updatedBook) formData.append(key, updatedBook[key]);\n            // console.log(\"formData\", formData);\n            const response = await axios.put(`http://localhost:8000/books/${updatedBook.id}`, formData);\n            const book = this.Books.find((book) => book.id === response.data.id);\n            for (const key in book) book[key] = response.data[key];\n\n            book.name = updatedBook.name;\n            book.image = updatedBook.image;\n            book.brief = updatedBook.brief;\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    };\n\n    getBooks = () => {\n\n        this.Books = Books;\n    };\n\n    createbook = async (newBook) => {\n\n        try {\n            const formData = new FormData();\n            for (const key in newBook) formData.append(key, newBook[key]);\n            // console.log(\"formData\", formData);\n\n            const response = await axios.post(\"http://localhost:8000/books\", formData);\n            this.Books.push(response.data);\n            console.log(response);\n        } catch (error) {\n            console.error(error);\n        }\n\n    };\n\n\n    fetchBooks = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:8000/books\");\n            this.Books = (response).data;\n            console.log(response.data);\n        } catch (error) {\n            console.error(\"fetchMovies:\", error)\n        }\n\n    }\n\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nbookStore.getBooks();\n\nexport default bookStore;"]},"metadata":{},"sourceType":"module"}