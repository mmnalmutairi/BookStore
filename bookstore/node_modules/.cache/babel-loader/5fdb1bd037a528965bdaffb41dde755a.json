{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport instance from \"./instance\"; // The file name starts with lowercase \n\nclass BookStore {\n  // proprty in lowercase\n  constructor() {\n    this.Books = [];\n\n    this.deletebook = async bookId => {\n      try {\n        await instance.delete(`/books/${bookId}`);\n        const updateBooks = this.Books.filter(book => book.id !== bookId);\n        this.Books = updateBooks;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateBook = async updatedBook => {\n      try {\n        const formData = new FormData();\n\n        for (const key in updatedBook) formData.append(key, updatedBook[key]);\n\n        const response = await instance.put(`/books/${updatedBook.id}`, formData);\n        const book = this.Books.find(book => book.id === response.data.id);\n\n        for (const key in book) book[key] = response.data[key];\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.createbook = async newBook => {\n      try {\n        const formData = new FormData();\n\n        for (const key in newBook) formData.append(key, newBook[key]);\n\n        const response = await instance.post(\"/books\", formData);\n        this.Books.push(response.data);\n        console.log(response);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.fetchBooks = async () => {\n      try {\n        const response = await instance.get(\"/books\");\n        this.Books = response.data;\n        console.log(response.data);\n      } catch (error) {\n        console.error(\"fetchMovies:\", error);\n      }\n    };\n\n    this.getBookById = bookId => {\n      return this.Books.find(book => book.id === +bookId);\n    };\n\n    makeAutoObservable(this);\n  } // use the id here instead of name\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\nexport default bookStore;","map":{"version":3,"sources":["/Users/engineermaha/Developement/JSFoundations-Git/BookStore/bookstore/src/components/stores/BookStore.js"],"names":["makeAutoObservable","instance","BookStore","constructor","Books","deletebook","bookId","delete","updateBooks","filter","book","id","error","console","log","updateBook","updatedBook","formData","FormData","key","append","response","put","find","data","createbook","newBook","post","push","fetchBooks","get","getBookById","bookStore"],"mappings":"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","sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport instance from \"./instance\";\n\n\n\n// The file name starts with lowercase \nclass BookStore {\n\n    // proprty in lowercase\n\n    Books = [];\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // use the id here instead of name\n    deletebook = async (bookId) => {\n        try {\n            await instance.delete(`/books/${bookId}`);\n            const updateBooks = this.Books.filter((book) => book.id !== bookId);\n            this.Books = updateBooks;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    updateBook = async (updatedBook) => {\n        try {\n            const formData = new FormData();\n            for (const key in updatedBook) formData.append(key, updatedBook[key]);\n            const response = await instance.put(`/books/${updatedBook.id}`, formData);\n            const book = this.Books.find((book) => book.id === response.data.id);\n            for (const key in book) book[key] = response.data[key];\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    };\n\n    createbook = async (newBook) => {\n\n        try {\n            const formData = new FormData();\n            for (const key in newBook) formData.append(key, newBook[key]);\n\n            const response = await instance.post(\"/books\", formData);\n            this.Books.push(response.data);\n            console.log(response);\n        } catch (error) {\n            console.error(error);\n        }\n\n    };\n\n\n    fetchBooks = async () => {\n        try {\n            const response = await instance.get(\"/books\");\n            this.Books = (response).data;\n            console.log(response.data);\n        } catch (error) {\n            console.error(\"fetchMovies:\", error)\n        }\n\n    };\n\n    getBookById = (bookId) => {\n        return this.Books.find((book) => book.id === +bookId);\n    };\n\n\n\n}\n\nconst bookStore = new BookStore();\nbookStore.fetchBooks();\n\nexport default bookStore;"]},"metadata":{},"sourceType":"module"}